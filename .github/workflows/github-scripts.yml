name: Learning GitHub Script
on:
  issues:
    types: [opened]
jobs:
  comment:
    runs-on: ubuntu-latest
    steps:
    - name: Comment on new issue
      uses: actions/github-script@0.8.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
            github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: "ðŸŽ‰ You've created this issue comment using GitHub Script!!!"
            });
    - name: Add issue to project board
      if: contains(github.event.issue.labels.*.name, 'bug')
      uses: actions/github-script@v7
      env: 
        projectName: hello-world-project
        columnName: Bug Backlog
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        #project-name: 'hello-world-project'
        #column-name-to-find: 'Bug Backlog'
        script: |
            const projectOwner = context.repo.owner;
            const projectName = process.env.projectName;
            const columnName = process.env.columnName;
            const issueId = context.payload.issue.id;
  
            if (!projectName || !columnName || !issueId) {
            console.log('Project name, column name, or issue Node ID is missing.');
              return;
            }
            
            // To get the Project Number, navigate to your project board in GitHub,
            // the URL will look something like:
            // https://github.com/orgs/YOUR_ORG_OR_USERNAME/projects/PROJECT_NUMBER 
            // or 
            // https://github.com/users/YOUR_USERNAME/projects/PROJECT_NUMBER
            // The PROJECT_NUMBER is what you need here.

            const projectNumber = 1; // <<<<<<<<<<< IMPORTANT: REPLACE WITH YOUR PROJECT NUMBER (e.g., 1, 2, 3...)

            // 1. Find the project ID (node_id)
            // This query fetches the project by name within the specified owner context
            const projectQuery = `
              query($owner: String!, $projectNumber: Int!) {
                user(login: $owner) { # *** Changed from 'organization' to 'user' *** Use 'user' if it's a user project
                  projectV2(number: $projectNumber) {
                    id
                  }
                }
              }
            `;

            let projectId;
            try {
              const { organization } = await github.graphql(projectQuery, {
                owner: projectOwner,
                projectNumber: projectNumber
              });
              //projectId = organization.projectV2.id;
              projectId = user.projectV2.id;
              console.log(`Found project ID: ${projectId}`);
            } catch (error) {
              console.error(`Error finding project: ${error.message}`);
              core.setFailed(`Could not find project '${projectName}' for owner '${projectOwner}'. Please check the project name and number, and ensure the token has 'project' permissions.`);
              return;
            }

            // 2. Add the issue to the project
            const addIssueMutation = `
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2Item(input: {projectId: $projectId, contentId: $contentId}) {
                  item {
                    id
                  }
                }
              }
            `;

            try {
              await github.graphql(addIssueMutation, {
                projectId: projectId,
                contentId: issueNodeId
              });
              console.log(`Successfully added issue #${github.event.issue.number} to project '${projectName}'.`);
            } catch (error) {
              console.error(`Error adding issue to project: ${error.message}`);
              core.setFailed(`Failed to add issue #${github.event.issue.number} to project '${projectName}'.`);
            }


            
