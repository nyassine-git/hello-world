name: Learning GitHub Script
on:
  issues:
    types: [opened]
jobs:
  comment:
    runs-on: ubuntu-latest
    steps:
    - name: Comment on new issue
      uses: actions/github-script@0.8.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
            github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: "ðŸŽ‰ You've created this issue comment using GitHub Script!!!"
            });
    - name: Add issue to project board
      if: contains(github.event.issue.labels.*.name, 'bug')
      uses: actions/github-script@v7
      env: 
        projectName: hello-world-project
        columnName: Bug Backlog
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        #project-name: 'hello-world-project'
        #column-name-to-find: 'Bug Backlog'
        script: |
            const projectName = process.env.projectName;
            const columnName = process.env.columnName;
            const issueId = context.payload.issue.id;
  
            if (!projectName || !columnName || !issueId) {
            console.log('Project name, column name, or issue Node ID is missing.');
              return;
            }

            // 1. Get the Project Node ID by name
            const projectsQuery = `
              query {
                repository(owner: "${context.repo.owner}", name: "${context.repo.repo}") {
                  projectsV2(first: 100, query: "${projectName}") {
                    nodes {
                      id
                      title
                    }
                  }
                }
              }
            `;
  
            const projectsResult = await github.graphql(projectsQuery);
            console.log('projectsResult', projectsResult);
            const targetProject = projectsResult.repository.projectsV2.nodes.find(
              (project) => project.title === projectName
            );
  
            if (!targetProject) {
              console.log(`Project "${projectName}" not found.`);
              return;
            }
  
            const projectId = targetProject.id;
            console.log(`Found project ID: ${projectId}`);
  
            // 2. Get the Status Field ID and the Option ID for the target column
            const fieldsQuery = `
              query {
                node(id: "${projectId}") {
                  ... on ProjectV2 {
                    fields(first: 100) {
                      nodes {
                        id
                        name
                        ... on ProjectV2SingleSelectField {
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
  
            const fieldsResult = await github.graphql(fieldsQuery);
            const statusField = fieldsResult.node.fields.nodes.find(
              (field) => field.name === 'Status' // Assuming your status field is named 'Status'
            );
  
            if (!statusField || !statusField.options) {
              console.log('Status field not found or has no options.');
              return;
            }
  
            const targetOption = statusField.options.find(
              (option) => option.name === columnName
            );
  
            if (!targetOption) {
              console.log(`Column "${columnName}" not found in the Status field.`);
              return;
            }
  
            const statusValueId = targetOption.id;
            console.log(`Found status option ID: ${statusValueId}`);
  
            // 3. Add the issue to the project and set the status
            const addItemMutation = `
              mutation AddItemToProject {
                addProjectV2ItemById(input: {
                  projectId: "${projectId}",
                  contentId: "${issueId}"
                }) {
                  item {
                    id
                  }
                }
              }
            `;
  
            const addItemResult = await github.graphql(addItemMutation);
            const itemId = addItemResult.addProjectV2ItemById.item.id;
            console.log(`Issue added to project with item ID: ${itemId}`);
  
            const updateItemMutation = `
              mutation UpdateProjectItemFieldValue {
                updateProjectV2ItemFieldValue(input: {
                  itemId: "${itemId}",
                  fieldId: "${statusField.id}",
                  value: { singleSelectOptionId: "${statusValueId}" }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;
  
            await github.graphql(updateItemMutation);
            console.log(`Issue #${context.issue.number} added to column "${columnName}" in project "${projectName}".`);
            
